package au.org.ala.merit

import au.org.ala.merit.config.ProgramConfig
import grails.testing.spring.AutowiredTest
import spock.lang.Specification

class ProjectConfigurationServiceSpec extends Specification implements AutowiredTest{

    Closure doWithSpring() {{ ->
        service ProjectConfigurationService
    }}

    ProjectConfigurationService service


    ProgramService programService = Mock(ProgramService)
    MetadataService metadataService = Mock(MetadataService)
    ManagementUnitService managementUnitService = Mock(ManagementUnitService)

    def setup() {
        service.programService = programService
        service.metadataService = metadataService
        service.managementUnitService = managementUnitService
    }

    def cleanup() {
    }

    void "Projects with a programId will use the associated program as a configuration source"() {

        setup:
        String programId = 'programId'
        Map project = [projectId:'project1', programId:programId]

        when:
        Map config = service.getProjectConfiguration(project)

        then:
        1 * programService.get(programId) >> [inheritedConfig:[projectReports:[], test:'test']]
        config.test == 'test'
    }


    void "Projects without a programId will use the metadata service program configuration as a configuration source"() {

        setup:
        Map project = [projectId:'project1', associatedProgram:'p1', associatedSubProgram:'p2']
        Map programConfig = [
                weekDaysToCompleteReport:42,
                reportType:ReportService.REPORT_TYPE_STAGE_REPORT,
                reportingPeriodInMonths:6,
                reportingPeriodAlignedToCalendar: true,
                optionalProjectContent:[]
        ]

        when:
        ProgramConfig config = service.getProjectConfiguration(project)

        then:
        1 * metadataService.getProgramConfiguration(project.associatedProgram, project.associatedSubProgram) >> programConfig
        config.projectReports.size() == 1
        config.projectReports[0].weekDaysToCompleteReport == programConfig.weekDaysToCompleteReport
        config.projectReports[0].reportType == programConfig.reportType
        config.projectReports[0].reportingPeriodInMonths == programConfig.reportingPeriodInMonths
        config.projectReports[0].reportsAlignedToCalendar == programConfig.reportingPeriodAlignedToCalendar
        config.excludes == [ProgramConfig.ProjectContent.DATA_SETS.toString(), ProgramConfig.ProjectContent.MERI_PLAN.toString(), ProgramConfig.ProjectContent.RISKS_AND_THREATS.toString()]

        !config.includesContent(ProgramConfig.ProjectContent.MERI_PLAN)
        !config.includesContent(ProgramConfig.ProjectContent.RISKS_AND_THREATS)

        when:
        programConfig.optionalProjectContent <<  'MERI Plan'
        config = service.getProjectConfiguration(project)

        then:
        1 * metadataService.getProgramConfiguration(project.associatedProgram, project.associatedSubProgram) >> programConfig
        config.includesContent(ProgramConfig.ProjectContent.MERI_PLAN)
        !config.includesContent(ProgramConfig.ProjectContent.RISKS_AND_THREATS)

        when:
        programConfig.optionalProjectContent <<  'Risks and Threats'
        config = service.getProjectConfiguration(project)

        then:
        1 * metadataService.getProgramConfiguration(project.associatedProgram, project.associatedSubProgram) >> programConfig
        config.includesContent(ProgramConfig.ProjectContent.MERI_PLAN)
        config.includesContent(ProgramConfig.ProjectContent.RISKS_AND_THREATS)

    }

    void "Projects where all reports have an activity type specified have autogenerated activities"() {
        setup:
        String programId = 'programId'
        Map project = [projectId:'project1', programId:programId]
        Map programConfig = [inheritedConfig:[projectReports:[[activityType:'1', reportType:ReportService.REPORT_TYPE_STAGE_REPORT]], test:'test']]

        when:
        Map config = service.getProjectConfiguration(project)

        then:
        1 * programService.get(programId) >> programConfig
        config.autogeneratedActivities == true

    }

    void "Traditional MERIT projects do not have autogenerated activities"() {
        Map project = [projectId:'project1', associatedProgram:'p1', associatedSubProgram:'p2']
        Map programConfig = [weekDaysToCompleteReport:42, reportType:ReportService.REPORT_TYPE_STAGE_REPORT, reportingPeriodInMonths:6, reportingPeriodAlignedToCalendar: true]

        when:
        Map config = service.getProjectConfiguration(project)

        then:
        1 * metadataService.getProgramConfiguration(project.associatedProgram, project.associatedSubProgram) >> programConfig
        config.autogeneratedActivities == false

    }

    void "The project configuration can be partially overridden by the management unit configuration"() {
        setup:
        String programId = 'programId'
        String muId = 'muId'
        Map project = [projectId:'project1', programId:programId, managementUnitId:muId]
        Map program = [inheritedConfig:[projectReports:[[activityType:'1', reportingPeriodInMonths: 6, firstReportingPeriodEnd:'2019-09-30T14:00:00Z', reportType:ReportService.REPORT_TYPE_STAGE_REPORT]], test:'test']]
        Map mu = [config:[projectReports:[[activityType:'1', reportingPeriodInMonths: 3, firstReportingPeriodEnd:'2019-06-30T14:00:00Z', label:'Quarter']]]]
        List programPriorities = [
                [category:"Category 1", priority:"p1", managementUnits:["mu1"]],
                [category:"Category 2", priority:"p2"],
                [category:"Category 3", priority:"p3", managementUnits:["mu2", "mu3"]]
        ]
        when:
        Map config = service.getProjectConfiguration(project)

        then: "the reporting period has been derived from the management unit config"
        1 * programService.get(programId) >> program
        1 * managementUnitService.get(muId) >> mu
        config.autogeneratedActivities == true
        config.projectReports[0].reportingPeriodInMonths == 3
        config.projectReports[0].firstReportingPeriodEnd == '2019-06-30T14:00:00Z'
        config.projectReports[0].label == 'Quarter'


        when: "The management unit config has specified an additional report type"
        mu.config.projectReports << [activityType:'2']
        config = service.getProjectConfiguration(project)

        then: "The project does not use the extra report type"
        1 * programService.get(programId) >> program
        1 * managementUnitService.get(muId) >> mu
        config.projectReports.size() == 1
        config.projectReports[0].activityType == '1'

        when: "the project does not have a management unit"
        project.managementUnitId = null
        program.outcomes = [[name:"outcome 1", priorities:[[category:"Category 1"]]], [name:"outcome 2", priorities:[[category:"Category 2"], [category:"Category 1"], [category:"Category 3"]]]]

        config = service.getProjectConfiguration(project)

        then: "the program priorities are used"
        1 * programService.get(programId) >> program
        1 * metadataService.findInvestmentPrioritiesByCategory(["Category 1", "Category 2", "Category 3"]) >> programPriorities
        config.priorities == programPriorities
        config.outcomes == program.outcomes

        when: "The project has a management unit"
        project.managementUnitId = muId
        config = service.getProjectConfiguration(project)

        then: "The program unit outcomes and management unit priorities are used"
        1 * programService.get(programId) >> program
        1 * managementUnitService.get(muId) >> mu
        1 * metadataService.findInvestmentPrioritiesByCategory(["Category 1", "Category 2", "Category 3"]) >> programPriorities
        config.priorities == []
        config.outcomes == program.outcomes

    }

    void "Program configuration can be completely overridden by Project configuration"() {
        setup:
        String programId = 'programId'
        String muId = 'muId'
        Map project = [projectId:'project1', programId:programId, managementUnitId:muId, config:[ projectReports:[]]]
        Map programConfig = [inheritedConfig:[projectReports:[[activityType:'1', reportingPeriodInMonths: 6, firstReportingPeriodEnd:'2019-09-30T14:00:00Z', reportType:ReportService.REPORT_TYPE_STAGE_REPORT]], test:'test']]
        Map mu = [config:[projectReports:[[activityType:'1', reportingPeriodInMonths: 3, firstReportingPeriodEnd:'2019-06-30T14:00:00Z', label:'Quarter']]]]
        List programPriorities = [
                [category:"Category 1", priority:"p1", managementUnits:["mu1"]],
                [category:"Category 2", priority:"p2"],
                [category:"Category 3", priority:"p3", managementUnits:["mu2", "mu3"]]
        ]
        programConfig.outcomes = [[name:"outcome 1", priorities:[[category:"Category 1"]]], [name:"outcome 2", priorities:[[category:"Category 2"], [category:"Category 1"], [category:"Category 3"]]]]

        when:
        Map config = service.getProjectConfiguration(project)

        then: "the reporting period has been derived from the project config"
        1 * programService.get(programId) >> programConfig
        1 * metadataService.findInvestmentPrioritiesByCategory(["Category 1", "Category 2", "Category 3"]) >> programPriorities
        1 * managementUnitService.get(muId) >> mu
        config.autogeneratedActivities == false
        config.projectReports.size() == 0
    }

    void "Program configuration can filter the service list"() {
        setup:
        String programId = 'programId'
        Map project = [projectId:'project1', programId:programId]
        Map programConfig = [inheritedConfig:[projectReports:[[activityType:'1', reportType:ReportService.REPORT_TYPE_STAGE_REPORT]], test:'test', activityBasedReporting:false]]
        List allServices = buildServiceList()
        programConfig.inheritedConfig.programServiceConfig = buildServiceConfig()

        when:
        ProgramConfig config = service.getProjectConfiguration(project)

        then:
        1 * programService.get(programId) >> programConfig
        1 * metadataService.getProjectServices() >> allServices
        config.services == programConfig.inheritedConfig.programServiceConfig.programServices.collect{[id: it.serviceId, name: "service "+it.serviceId, service: allServices.find({service -> service.id == it.serviceId}), output:allServices.find({service -> service.id == it.serviceId}).outputs[0].sectionName, scores:[[scoreId:it.serviceTargets[0]]], mandatory:null]}
    }

    private Map buildServiceConfig() {
        List serviceIds = [2, 3, 4, 11, 15, 18]
        Map config = [serviceFormName: 'ServiceForm']
        config.programServices = serviceIds.collect {
            [serviceId:it, serviceTargets:['score'+it]]
        }
        config
    }

    private List buildServiceList() {
        List services = []
        for (int i=0; i<20; i++) {
            services << [id: i, name: "service ${i}", outputs: [[formName:"ServiceForm", sectionName:"output ${i}"]], scores:[[scoreId:'score'+i]]]
        }
        services
    }

}
