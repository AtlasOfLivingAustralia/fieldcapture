package au.org.ala.fieldcapture

import pages.AdminClearCachePage
import pages.AdminTools
import pages.ReportPage
import pages.RlpProjectPage
import spock.lang.Stepwise

@Stepwise
class ReportServiceFilteringSpec extends StubbedCasSpec {

    def setupSpec() {
        useDataSet('dataset2')
    }

    def cleanup() {
        logout(browser)
    }

    // Clear the metadata cache to ensure the services and scores are loaded correctly.
    def clearCache() {
        setup:
        login([userId: '2', role: "ROLE_ADMIN", email: 'admin@nowhere.com', firstName: "MERIT", lastName: 'ALA_ADMIN'], browser)

        when:
        to AdminTools

        then:
        at AdminTools

        when:
        clearCache()

        then:
        waitFor 5, { to AdminClearCachePage }
    }

    def "the reports can be regenerated by an FC_ADMIN"() {

        setup:
        String projectId = '1'
        login([userId: '1', role: "ROLE_FC_ADMIN", email: 'admin@nowhere.com', firstName: "MERIT", lastName: 'FC_ADMIN'], browser)

        when:
        to RlpProjectPage, projectId

        then:
        waitFor { at RlpProjectPage }

        when: "Display the admin tab, navigate to the settings section then press the re-generate reports button"
        adminTab.click()

        then:
        waitFor { adminContent.displayed }

        when: "Click on the project settings"
        adminContent.projectSettingsTab.click()

        then:
        waitFor { adminContent.projectSettings.displayed }

        when:
        adminContent.projectSettings.regenerateReports()

        then:
        waitFor { at RlpProjectPage }

        when:
        reportingTab.click()


        then:
        waitFor { projectReports.displayed }

        and: "The new reports are displayed"

        waitFor {
            projectReports.reports.size() == 17
            projectReports.reports[1].name != ""
        }
        projectReports.reports[0].name == "Year 2018/2019 - Quarter 1 Outputs Report"
        projectReports.reports[0].fromDate == "01-07-2018"
        projectReports.reports[0].toDate == "30-09-2018"


    }

    def "When no services are selected in the MERI plan all services will be shown on the outputs report"() {
        setup:
        String projectId = '1'
        login([userId: '10', role: "USER", email: 'editor@nowhere.com', firstName: "MERIT", lastName: 'Editor'], browser)

        when:
        to RlpProjectPage, projectId

        then:
        waitFor { at RlpProjectPage }

        when:
        reportingTab.click()

        then:
        waitFor { projectReports.displayed }

        when:
        projectReports.reports[0].edit()

        then:
        waitFor { at ReportPage }

        and: "All of the output sections are displayed."
        getFormSections().size() == 37

        when: "We leave the report to release the lock"
        exitReport()

        then:
        waitFor { at RlpProjectPage }
    }

    def "When services are selected in the MERI plan only mandatory and selected services will be shown on the outputs report"() {
        setup:
        String projectId = '1'
        login([userId: '1', role: "USER", email: 'editor@nowhere.com', firstName: "MERIT", lastName: 'Editor'], browser)

        when: "select activity 2 on the MERI plan"
        to RlpProjectPage, projectId

        waitFor { at RlpProjectPage }
        def meriPlan = openMeriPlanEditTab()
        meriPlan.projectServices[0].selectService("Communication materials")
        meriPlan.projectServices[0].selectScore("Number of communication materials published")
        meriPlan.projectServices[0].targets = "5"
        meriPlan.projectServices[0].date = "01-07-2021"
        meriPlan.save()

        and: "open the report"
        reportingTab.click()
        waitFor { projectReports.displayed }
        projectReports.reports[0].edit()

        then:
        waitFor { at ReportPage }

        and: "Only the mandatory and selected activities are displayed."
        getFormSections() == ['koRLP_-_Output_WHS', 'koRLP_-_Change_Management', 'koRLP_-_Communication_materials']

    }

}
