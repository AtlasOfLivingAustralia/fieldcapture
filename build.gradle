buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath 'org.grails.plugins:quartz:2.0.13'
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.1'
        classpath 'com.github.tomakehurst:wiremock-jre8-standalone:2.28.0'
    }
}

plugins {
    id 'war'
    id "com.magnetichq.client-dependencies" version "2.0.0"
    id 'jacoco'
    id 'com.williamhill.wiremock' version '0.4.1'
}
sourceCompatibility = '11'
targetCompatibility = '17'

version "$meritVersion"
group "au.org.ala"
description "Fieldcapture"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin: "groovy"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

if (Boolean.valueOf(enableClover)) {
    apply from: "${project.projectDir}/gradle/clover.gradle"
}

if (Boolean.valueOf(enableJacoco)) {
    apply from: "${project.projectDir}/gradle/jacoco.gradle"
}

apply from: "${project.projectDir}/gradle/publish.gradle"

repositories {
    mavenLocal()
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url = uri("https://maven.pkg.github.com/atlasoflivingaustralia/ecodata-client-plugin")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv('GPR_USER')
            password = project.findProperty("gpr.token") ?: System.getenv('GPR_TOKEN')
        }
    }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    mavenCentral()
}



def openhtmltopdfversion = '1.0.10'
def geoToolsVersion = "11.1"
def metadataExtractorVersion = "2.6.2"
def imgscalrVersion = "4.2"
def httpmimeVersion = "4.2.1"
def jtsVersion = "1.8"

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:cache-ehcache:3.0.0"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"
    implementation 'dk.glasius:external-config:3.0.0'
    implementation "org.grails.plugins:ala-auth:$alaSecurityLibsVersion"
    implementation "org.grails.plugins:ala-ws-security-plugin:$alaSecurityLibsVersion"
    implementation "org.grails.plugins:ala-ws-plugin:$alaSecurityLibsVersion"
    implementation "au.org.ala:userdetails-service-client:$alaSecurityLibsVersion"
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.6"
    runtimeOnly "org.grails.plugins:ala-bootstrap3:4.0.0"
    implementation 'org.grails.plugins:excel-export:2.1'
    implementation 'org.grails.plugins:mail:2.0.0'
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'org.grails.plugins:quartz:2.0.13'
    implementation 'org.quartz-scheduler:quartz:2.2.1'
    implementation "com.openhtmltopdf:openhtmltopdf-core:${openhtmltopdfversion}"
    implementation "com.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmltopdfversion}"
    implementation "org.jsoup:jsoup:1.14.3"
    implementation "org.geotools:gt-geojson:${geoToolsVersion}"
    implementation "com.drewnoakes:metadata-extractor:${metadataExtractorVersion}"
    implementation "org.imgscalr:imgscalr-lib:${imgscalrVersion}"
    implementation "com.vividsolutions:jts:${jtsVersion}"
    implementation "org.geotools.xsd:gt-xsd-kml:${geoToolsVersion}"
    implementation 'joda-time:joda-time:2.3'
    implementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    implementation "org.apache.httpcomponents:httpcore:4.4.13"
    implementation "org.apache.httpcomponents:httpclient:4.5.7"
    implementation "org.apache.httpcomponents:httpmime:4.2.1"
    implementation "org.apache.pdfbox:pdfbox:2.0.4"
    implementation 'org.grails.plugins:excel-export:2.1'
    implementation 'org.grails.plugins:excel-import:3.0.2'

    implementation 'au.com.bytecode:opencsv:2.4'
    implementation 'org.grails.plugins:csv:1.0.1'

    implementation "org.grails.plugins:grails-google-visualization:2.2.1"
    implementation 'javax.media:jai-core:1.1.3'

    implementation ('net.sourceforge.nekohtml:nekohtml:1.9.22'){
        exclude module: "xercesImpl"
    }
    implementation 'org.grails.plugins:grails-cookie:2.0.3'

    implementation 'org.apache.poi:ooxml-schemas:1.4'
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    implementation 'org.codehaus.groovy:groovy-dateutil:2.5.0'

    implementation 'au.org.ala:ala-cas-client:2.5'
    implementation "org.grails.plugins:converters"
    implementation "org.grails:grails-plugin-codecs"
    implementation "commons-io:commons-io:2.6"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    implementation "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    implementation "org.commonmark:commonmark:0.24.0"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20240325.1"

    // Used to get a token that can be used to access the BDR API hosted in Azure
    implementation platform('com.azure:azure-sdk-bom:1.2.28')

    implementation 'com.azure:azure-identity'
    implementation 'com.azure:azure-storage-blob'

    // Used to access the Cognito Identity Pool as tokens from the user pool
    // don't have an audience claim which is required by Azure
    implementation(platform("software.amazon.awssdk:bom:2.27.21"))
    implementation 'software.amazon.awssdk:cognitoidentity'

    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.1.2-b03"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"

    runtimeOnly "net.java.dev.jna:jna:4.5.1"
    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation "com.codeborne:phantomjsdriver:1.3.0"
    testImplementation "com.icegreen:greenmail:1.5.14"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation ("org.grails.plugins:geb") {
        exclude module: "grails-core"
    }
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation "org.pac4j:pac4j-jwt:5.4.3"
    testImplementation "com.github.tomakehurst:wiremock-jre8-standalone:2.28.0"
    implementation "org.hibernate:hibernate-validator:6.2.0.Final"
    testImplementation "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"
    testRuntimeOnly "net.sourceforge.htmlunit:htmlunit:2.18"

    assets "com.bertramlabs.plugins:less-asset-pipeline:$assetPipelineVersion"

    providedCompile "io.methvin:directory-watcher:0.4.0"

    if (!Boolean.valueOf(inplace)) {
        implementation "org.grails.plugins:ecodata-client-plugin:8.3-SNAPSHOT"
    }
}

springBoot {
    buildInfo()
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx2048m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)

    if (Boolean.valueOf(startWiremock)) {
        runWithWiremock = true
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams true
    }
}

wiremock {
    dir "${project.projectDir}/src/integration-test/resources/wiremock/"
    params "--port=8018 --global-response-templating --local-response-templating"
}

clientDependencies {
    installDir = "grails-app/assets/vendor-ext"
    npm {
        'bootstrap'('4.6.0', transitive:false)
        'bootbox'('5.5.2') {
            include 'bootbox.all.min.js'
        }
        'jquery'('3.6.0')
        'font-awesome'('4.7.0')
        'knockout'('3.5.1', from:'build/output')
        'knockout-mapping'('2.6.0')
        'bootstrap-datepicker'('1.9.0')
        'select2'('4.0.13')
        'underscore'('1.12.1') {
            include 'underscore.js'
        }
        'datatables.net'("1.13.6")
        'datatables.net-bs4'("1.13.6")
        "datatables.net-buttons-dt"("2.4.2")
        'datatables.net-buttons-bs4'("2.4.2")
        '@danielfarrell/bootstrap-combobox'('1.1.8', transitive:false)
        'fancybox'('3.0.1')
        "fuelux"("3.17.2", transitive:false)
        "fuse.js"("6.4.6", transitive:false)
        "leaflet"("0.7.7")
        "select2-theme-bootstrap4"("1.0.2")
        "slickgrid"("2.4.38")
        "slider-pro"("1.6.0", transitive:false)
        "jquery-appear-original"("0.4.1", transitive:false)
        "jquery-file-download"("1.4.6", from: "src/Scripts") {
            include "jquery.fileDownload.js"
        }
        "jquery.shorten"("1.0.0", from: "src")
        "js-cookie"("3.0.0")
        "@taitems/jquery-gantt"("1.1.2")
        "jstimezonedetect"("1.0.7")
        "jszip"("3.7.1", transitive:false)
        "pdfmake"("0.1.36", from: "build", transitive:false)
        "typeahead.js"("0.11.1")
        'frigus02-vkbeautify'("1.0.1") {
            include "vkbeautify.js"
        }

    }
    bower {
        'html5shiv'("3.7.3", transitive:false)
        "blockui"("2.69")
        'jquery-ui'('1.12.1')
    }
}

assets {
    minifyJs = true
    minifyCss = true
    maxThreads = 4 //useful for concurrent asset processing during build
    configOptions = [:] //useful for custom config on extension libraries
    includes = ['webjars/**/images/*']
    excludes = ['**/*.less','**/build/hintrc.js', 'hintrc.unminified.js', '**/spec.hintrc.js', 'spec.hintrc.unminified.js', '**/*hintrc*', '**/webjars/**'] //Example Exclude GLOB pattern
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

integrationTest {
    // When tests are failing github actions is producing no log file at all.
    // I'm theorising we are exceeding a log limit so trying to end tests on first failure.
    failFast = true
}


bootJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    enabled = true
    classifier = 'exec'
    launchScript()
}

bootWar {
    enabled = false
}

if (Boolean.valueOf(inplace)) {
    grails {
        exploded = true
        plugins {
            implementation(project(':ecodata-client-plugin'))
        }
    }

    // Make ecodata-client-plugin _Events task is called
    assetCompile.dependsOn("ecodata-client-plugin:_Events")
    compileGroovy.dependsOn("ecodata-client-plugin:_Events")
    bootRun.dependsOn("ecodata-client-plugin:_Events")
}

task _Events {
    doLast {
        println "Running Events.groovy script"
        println "${project.projectDir}/Events.groovy"
        new GroovyScriptEngine(["${project.projectDir}"] as String[]).run("Events.groovy", new Binding(['projectDir': project.projectDir]))
    }
}

integrationTest {
    systemProperties System.properties
    
    // When tests are failing github actions is producing no log file at all.
    // I'm theorising we are exceeding a log limit so trying to end tests on first failure.
    failFast = true
}

assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)

configurations.all {
    resolutionStrategy.cacheChangingModulesFor snapshotCacheTime as Integer, 'seconds'
}
